generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                @id @default(uuid())
  name                  String
  email                 String?               @unique
  emailVerified         DateTime?             @map("email_verified")
  image                 String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  accounts              Account[]
  discord_webhooks      Webhooks[]
  notification_settings NotificationSettings?
  profile_settings      ProfileSettings?
  sessions              Session[]
  trackedCRNs           TrackedSection[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("vertification_requests")
}

model TrackedSection {
  userId    String   @map("user_id")
  crn       String   @db.VarChar(5)
  createdAt DateTime @default(now())
  term      String   @db.VarChar(10)
  sections  Section  @relation(fields: [term, crn], references: [term, crn], onDelete: Cascade, onUpdate: NoAction)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, term, crn])
  @@map("tracked_sections")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Section {
  term             String           @db.VarChar(10)
  crn              String           @db.VarChar(5)
  title            String           @db.VarChar(100)
  subject          String           @db.VarChar(10)
  course           String           @db.VarChar(10)
  section          String           @db.VarChar(3)
  credit_hours     Decimal          @db.Decimal
  subject_desc     String
  instructor_json  Json?            @db.Json
  meetings_json    Json?            @db.Json
  attributes       String?          @db.VarChar(500)
  instruction_type String?          @db.VarChar(50)
  schedule_type    String           @db.VarChar(10)
  session          String           @db.VarChar(50)
  site             String?          @db.VarChar(50)
  section_open     Boolean
  tracked_sections TrackedSection[]

  @@id([term, crn])
  @@unique([term, subject, course, section], map: "section_num_key")
  @@map("sections")
}

model Webhooks {
  userId      String @map("user_id")
  webhook_url String
  users       User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, webhook_url])
  @@map("discord_webhooks")
}

model Majors {
  major_id         Int               @id @default(autoincrement())
  name             String            @unique @db.VarChar(100)
  profile_settings ProfileSettings[]

  @@map("majors")
}

model NotificationSettings {
  userId       String  @id @map("user_id")
  email        String?
  phone_number String?
  users        User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("notification_settings")
}

model ProfileSettings {
  userId   String  @id @map("user_id")
  username String? @db.VarChar(20)
  class    Class?
  major_id Int?
  majors   Majors? @relation(fields: [major_id], references: [major_id], onUpdate: NoAction)
  users    User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("profile_settings")
}

enum Class {
  Freshman
  Sophomore
  Junior
  Senior
  Other

  @@map("class")
}
